import random
from io import BytesIO

from django.contrib.auth.models import User
from django.http import HttpResponse
from django.shortcuts import render
from django.template.loader import get_template
from django.views.generic import CreateView, ListView, View
from easy_pdf.rendering import render_to_pdf
from xhtml2pdf import pisa

from master.forms import QForm
from master.models import Question


class QuestionC(CreateView):
    template_name = 'question.html'
    model = Question
    form_class = QForm
    success_url = '/add'

'''
def qlist(request):
    products = list(Question.objects.all())

    products = random.sample(products, 3)

    return render(request, 'qlist.html', {'products': products})


# class HelloPDFView(PDFTemplateView):
#   template_name = "generator.html"



import csv

from django.http import HttpResponse
from django.contrib.auth.models import User

def export_users_csv(request):
    response = HttpResponse(content_type='text/csv')
    response['Content-Disposition'] = 'attachment; filename="users.csv"'

    writer = csv.writer(response)
    writer.writerow(['Question', 'Difficulty'])

    users = Question.objects.all().values_list('questions', 'difficulty')
    for user in users:
        writer.writerow(user)

    return response
'''


from django.http import HttpResponse
from django.template.loader import render_to_string
from weasyprint import HTML
import tempfile


def generate_pdf(request):
    """Generate pdf."""
    # Model data

    people = list(Question.objects.all())

    people = random.sample(people, 3)

    # Rendered
    html_string = render_to_string('generator.html', {'people': people})
    html = HTML(string=html_string)
    result = html.write_pdf()

    # Creating http response
    response = HttpResponse(content_type='application/pdf;')
    response['Content-Disposition'] = 'inline; filename=list_people.pdf'
    response['Content-Transfer-Encoding'] = 'binary'
    with tempfile.NamedTemporaryFile(delete=True) as output:
        output.write(result)
        output.flush()
        output.seek(0)
        response.write(output.read())

    return response


'''from django.views.generic import CreateView
from myapp.models import MyModel

class MyCreateView(CreateView):
    model = MyModel
    fields = ['field1', 'field2', 'staff_status']
    template_name = 'my_template.html'

    def get_form(self, form_class=None):
        form = super().get_form(form_class)
        form.fields['staff_status'].queryset = form.fields['staff_status'].queryset.filter(staff_status=False)
        return form'''

    class SubjectCreateView(CreateView):
    model = Subject
    fields = ['semesters', 'subject_name']
    template_name = 'question.html'
    success_url = reverse_lazy('subject_list')

    def form_valid(self, form):
        # Retrieve the Course object based on its ID
        course = get_object_or_404(Course, id=self.kwargs['course_id'])
        
        # Set the course_name field of the form to the retrieved Course object
        form.instance.course_name = course
        
        # Call the parent class's form_valid() method to save the form
        return super().form_valid(form)
